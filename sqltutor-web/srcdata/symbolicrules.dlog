
// part of speech groups
//
symIsVerb('VB').
symIsVerb('VBD').
symIsVerb('VBG').
symIsVerb('VBN').
symIsVerb('VBP').
symIsVerb('VBZ').

symIsAdjective('JJ').
symIsAdjective('JJR').
symIsAdjective('JJS').

symIsNoun('NN').
symIsNoun('NNS').
symIsNoun('NNP').
symIsNoun('NNPS').

symIsPronoun('PRP').
symIsPronoun('PRP$').
symIsPronoun('WP').
symIsPronoun('WP$').

symIsAdverb('RB').
symIsAdverb('RBR').
symIsAdverb('RBS').

symIsChunk('NP').
symIsChunk('PP').
symIsChunk('VP').
symIsChunk('ADVP').
symIsChunk('ADJP').
symIsChunk('SBAR').
symIsChunk('PRT').
symIsChunk('INTJ').
symIsChunk('QP').
symIsChunk('S').

symIsSingular('NN').
symIsSingular('NNP').

symIsPlural('NNS').
symIsPlural('NNPS').

// symbolic node ?id is a leaf node (has a parent but no children)
symIsLeaf(?id) :- 
  symParentOf(?parent,?id,?pos),
  not symParentOf(?id,?child,?pos2).
  
// all the non-literal leaf tokens.  empty means all leaves are literals.
symNonLiteralLeaves(?id) :-
  symIsLeaf(?id),
  symType(?id,?type),
  ?type != 'LITERAL'.

// ?ancestor is the ancestor of ?descendent, at depth ?depth (base case, depth 1)
symAncestorOf(?ancestor,?descendent,?depth) :-
  symParentOf(?ancestor,?descendent,?pos),
  ?depth = 1.
  
// ?ancestor is the ancestor of ?descendent, at depth ?depth (inductive case)  
symAncestorOf(?ancestor,?descendent,?depth) :-
  symParentOf(?ancestor,?token,?pos),
  symAncestorOf(?token, ?descendent, ?depth2),
  ?depth2 + 1 = ?depth.


// token 1 and 2 have a common ancestor ?ancestor and depths 1 and 2, respectively
symCommonAncestorDepth(?ancestor,?token1,?token2,?depth1,?depth2) :-
  symAncestorOf(?ancestor,?token1,?depth1),
  symAncestorOf(?ancestor,?token2,?depth2),
  ?token1 != ?token2.
  
// token 1 and 2 have a common ancestor ?ancestor  
symCommonAncestor(?ancestor,?token1,?token2) :- symCommonAncestor(?ancestor,?token1,?token2,?depth1,?depth2).
  
	
symHasGreaterCommonAncestor(?ancestor,?token1,?token2) :-
    // is a common ancestor
	symCommonAncestorDepth(?ancestor,?token1,?token2,?depth1,?depth2),
	// with another common ancestor of greater depth
	symCommonAncestorDepth(?ancestor2,?token1,?token2,?depth3,?depth4),
	?depth3 > ?depth1.
	
symHasLesserCommonAncestor(?ancestor,?token1,?token2) :-
    // is a common ancestor
	symCommonAncestorDepth(?ancestor,?token1,?token2,?depth1,?depth2),
	// with another common ancestor of greater depth
	symCommonAncestorDepth(?ancestor2,?token1,?token2,?depth3,?depth4),
	?depth3 < ?depth1.

symLeastCommonAncestor(?ancestor,?token1,?token2,?depth1,?depth2) :-
    // is a common ancestor with none of greater depth
	symCommonAncestorDepth(?ancestor,?token1,?token2,?depth1,?depth2),
	not symHasLesserCommonAncestor(?ancestor,?token1,?token2).

symNotLastChild(?parent, ?child, ?pos) :-
  symParentOf(?parent, ?child, ?pos),
  symParentOf(?parent, ?child2, ?pos2),
  ?pos < ?pos2.
  
symLastChild(?parent, ?child, ?pos) :-
  symParentOf(?parent, ?child, ?pos),
  not symNotLastChild(?parent, ?child, ?pos).
  
symNumChildren(?parent, ?num) :- 
  symLastChild(?parent, ?child, ?pos), 
  ?pos + 1 = ?num.

symEarliestTableEntityRef(?ref, ?entity) :-
  symRefsTableEntity(?ref, ?entity),
  not symEarlierTableEntityRef(?ref, ?entity, ?earlierRef).

symEarlierTableEntityRef(?ref, ?entity, ?earlierRef) :-
  symRefsTableEntity(?ref, ?entity),
  symRefsTableEntity(?earlierRef, ?entity),
  ?earlierRef < ?ref.