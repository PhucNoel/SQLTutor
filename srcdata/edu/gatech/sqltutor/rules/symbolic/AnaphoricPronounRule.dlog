
ruleAnaphoricPronoun(?ref) :-
	ruleAnaphoricPronoun_firstRef(?ref),
	ruleAnaphoricPronoun_refPair(?ref1, ?ref2, ?tableEntity).
  

// a pair of {TABLE_ENTITY_REF}, with ?ref1 being the one that comes first
ruleAnaphoricPronoun_refPair(?ref1, ?ref2, ?tableEntity) :-
  symType(?ref1, 'TABLE_ENTITY_REF'), 
  symType(?ref2, 'TABLE_ENTITY_REF'), 
  symRefsTableEntity(?ref1, ?tableEntity), 
  symRefsTableEntity(?ref2, ?tableEntity), 
  ?ref1 < ?ref2.
  
ruleAnaphoricPronoun_afterSomeUse(?ref) :-
  ruleAnaphoricPronoun_refPair(?ref1, ?ref, ?tableEntity).
  
ruleAnaphoricPronoun_firstRef(?ref) :-
  symType(?ref, 'TABLE_ENTITY_REF'),
  not ruleAnaphoricPronoun_afterSomeUse(?ref).
  
ruleAnaphoricPronoun_otherRefs(?baseRef, ?otherRef) :-
  ruleAnaphoricPronoun_otherRefsEntity(?baseRef, ?otherRef, ?tableEntity).
	
ruleAnaphoricPronoun_otherRefsEntity(?baseRef, ?otherRef, ?tableEntity) :-
	symRefsTableEntity(?baseRef, ?tableEntity),
	ruleAnaphoricPronoun_refPair(?baseRef, ?otherRef, ?tableEntity),
	?baseRef != ?otherRef.
  
ruleAnaphoricPronoun_otherRefs(?baseRef, ?otherRef, ?tableEntity) :-
	symRefsTableEntity(?baseRef, ?tableEntity),
	ruleAnaphoricPronoun_refPair(?otherRef, ?baseRef, ?tableEntity),
	?baseRef != ?otherRef.

// find potential blocking references between two references to the same table entity
// "maybe" blocking because the ref could be possessed by a ref to the same entity
ruleAnaphoricPronoun_maybeBlockingRefs(?baseRef, ?nextRef, ?blockingRef) :-
  ruleAnaphoricPronoun_otherRefsEntity(?baseRef, ?nextRef, ?tableEntity),
  // blocker references a different entity
  symType(?blockingRef, 'TABLE_ENTITY_REF'),
  symRefsTableEntity(?blockingRef, ?otherEntity),
  ?otherEntity != ?tableEntity,
  // blocker comes in between ref pair entries
  // NOTE: depends on order of id assignment
  ?baseRef < ?blockingRef,
  ?nextRef > ?blockingRef.

