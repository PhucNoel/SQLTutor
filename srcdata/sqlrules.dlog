sqlAncestorOf(?a,?d) :- sqlParentOf(?a,?d).
sqlAncestorOf(?a,?d) :- sqlParentOf(?a,?p), sqlParentOf(?p,?d).
            
// ?eq is an '=' operator comparing two columns            
sqlIsAttributeEquality(?eq) :- 
  sqlNodeHasType(?eq, 'BinaryRelationalOperatorNode'),
  sqlOperator(?eq, '='),
  sqlParentOf(?eq, ?c1), sqlParentOf(?eq, ?c2), ?c1 != ?c2,
  sqlNodeHasType(?c1, 'ColumnReference'), sqlNodeHasType(?c2, 'ColumnReference').
            
// ?eq is an '=' operator comparing attributes ?t1.?attr1 and ?t2.?attr2
sqlIsKeyEquality(?eq, ?t1, ?attr1, ?t2, ?attr2) :- 
  sqlIsAttributeEquality(?eq),
  sqlParentOf(?eq, ?c1), sqlParentOf(?eq, ?c2),
  sqlTableAlias(?t1, ?alias1), sqlTableAlias(?c1, ?alias1), sqlColumnName(?c1, ?attr1),
  sqlTableAlias(?t2, ?alias2), sqlTableAlias(?c2, ?alias2), sqlColumnName(?c2, ?attr2).
  
// ?node is a string literal with value ?value
sqlStringLiteral(?node,?value) :-
  sqlNodeHasType(?node, 'CharConstantNode'),
  sqlLiteralValue(?node,?value).

// ?eq is an operator type ?op comparing with a literal value ?val
sqlLiteralComparison(?eq, ?op, ?table, ?colname, ?val) :-
  // binary operator
  sqlNodeHasType(?eq, 'BinaryRelationalOperatorNode'),
  sqlOperator(?eq, ?op),
  // capture children
  sqlParentOf(?eq, ?child1), sqlParentOf(?eq, ?child2), ?child1 != ?child2,
  // one child is the attribute
  sqlTableAlias(?table, ?alias), sqlTableAlias(?child1, ?alias), sqlColumnName(?child1, ?colname),
  // the other is a string literal
  sqlStringLiteral(?child2,?val).


// only binary relational operators or AND nodes are possible always-on choices
sqlOpAlwaysCandidate(?node) :- sqlNodeHasType(?node, 'BinaryRelationalOperatorNode').
sqlOpAlwaysCandidate(?node) :- sqlNodeHasType(?node, 'AndNode').
            
// condition applies when it's the WHERE clause
sqlOperatorAlways(?node) :- sqlOpAlwaysCandidate(?node), sqlParentOf(?p, ?node), sqlNodeHasType(?p, 'SelectNode').
// or an ON clause
sqlOperatorAlways(?node) :- sqlOpAlwaysCandidate(?node), sqlParentOf(?p, ?node), sqlNodeHasType(?p, 'JoinNode').
// or it's parent always applies
sqlOperatorAlways(?node) :- sqlOpAlwaysCandidate(?node), sqlParentOf(?p, ?node), sqlOperatorAlways(?p).

// ?t1 and ?t2 are two distinct table references
sqlIsTablePair(?t1,?t2) :- 
  sqlNodeHasType(?t1,'FromBaseTable'), 
  sqlNodeHasType(?t2, 'FromBaseTable'), 
  ?t1 != ?t2.
  
// ?t1 and ?t2 are two implicitly joined table references
sqlImplicitJoined(?t1,?t2) :- 
  sqlIsTablePair(?t1,?t2), 
  sqlParentOf(?flist, ?t1), 
  sqlParentOf(?flist, ?t1), 
  sqlNodeHasType(?flist, 'FromList').

// ?t1 and ?t2 are two explicitly joined table references  
sqlExplicitJoined(?t1,?t2) :- 
  sqlIsTablePair(?t1,?t2), 
  sqlParentOf(?join, ?t1), 
  sqlParentOf(?join, ?t2), 
  sqlNodeHasType(?join, 'JoinNode').
  
sqlJoined(?t1,?t2) :- sqlImplicitJoined(?t1,?t2).
sqlJoined(?t1,?t2) :- sqlExplicitJoined(?t1,?t2).

sqlColumnTableName(?colId, ?tableName) :-
  sqlNodeHasType(?colId, 'ColumnReference'),
  sqlNodeHasType(?tableId, 'FromBaseTable'),
  sqlTableAlias(?colId, ?tableAlias),
  sqlTableAlias(?tableId, ?tableAlias),
  sqlTableName(?tableId, ?tableName).


sqlColumnInfo(?colId, ?tableAlias, ?tableName, ?colName) :-
  sqlColumnTableName(?colId, ?tableName),
  sqlColumnName(?colId, ?colName),
  sqlTableAlias(?coldId, ?tableAlias).


